/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 20.02.2025 17:21:20

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 41632;
#else
constexpr int kTensorArenaSize = 40608;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0019454656867310405, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 99, 40, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { -1, 4000, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data3[2] = { -2263, 2263, };
const TfArray<1, int> tensor_dimension3 = { 1, { 2 } };
const TfArray<1, float> quant3_scale = { 1, { 2.6389450795250013e-05, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[2*4000] = { 
  12, 6, -2, -22, 7, 2, 2, 13, -13, -6, 2, -15, -2, -15, -1, -12, 7, 0, -17, 0, 0, 0, -8, -1, -14, 8, -15, -18, -22, 14, 26, -9, 2, 3, 42, 30, -7, 12, 43, 40, 29, 12, 39, 34, 58, 29, -4, -17, -11, -6, 37, 44, 16, 11, 44, 3, 33, 60, 13, 44, 28, 21, 26, -2, -1, 13, 43, 8, 31, 16, 50, 38, 70, 37, 34, 52, 36, -1, -19, 35, -3, -3, -7, -10, 32, 7, 11, -9, 6, 35, -8, -12, -15, 16, -10, 17, 5, 4, 18, 18, -1, 32, -10, -3, -11, 34, -35, -17, -13, 11, -2, -7, -2, 16, 3, -11, -29, 5, -14, -5, 5, 29, -12, -20, 1, 13, -1, -22, 3, 10, 6, 13, 8, 10, 3, -22, 26, 6, 15, 14, 3, 9, 11, 12, -5, 4, 24, 15, -6, -1, -1, 12, -5, 14, 5, 4, -2, -14, 22, 15, 0, 23, -2, -19, -1, 2, -4, 2, 12, 2, -1, 10, 0, -6, -20, -19, -2, -11, 2, -21, 4, -3, -23, -28, -17, -6, -6, -3, -34, 16, 13, -10, -8, 24, 11, 60, -24, 1, 36, 17, 32, 33, 50, 28, 25, 33, 14, 28, -1, 6, 21, 33, 23, 30, 7, 9, 24, 50, 23, 27, 1, 46, 18, 26, -6, 1, 51, 20, 26, 50, 62, 48, 47, 61, 21, 26, -25, 3, -10, 47, -4, -18, -24, -8, 31, -7, -33, -10, 19, 13, -2, 5, -7, 17, 20, 4, -8, 0, -13, -29, -4, -7, -11, 2, 37, 11, 12, -9, -2, -7, 0, 2, -1, -11, -10, -1, 8, 4, -5, 1, 2, 8, 12, 0, -15, -5, 27, -8, -3, 18, -7, 6, -5, 14, 10, 12, 15, 2, 19, 43, 44, 15, -10, 24, -7, -8, 0, 23, 7, 11, 2, -3, 9, 27, 6, 5, 1, 1, -21, -7, 14, 2, 0, -9, 0, -2, 2, 4, -13, -4, -1, -8, 2, -6, -28, 16, -7, -2, -29, -4, -13, -16, -7, -8, -20, -27, -15, -32, -14, -8, -12, -16, 1, 21, -11, 39, -29, -17, 55, 30, 1, 20, 16, 27, -2, 37, 22, -12, -8, 5, 52, 35, 10, 23, 36, 18, 23, 56, 18, 47, 36, -7, 13, 24, -6, -23, 37, 30, 9, 10, 21, 52, 32, 34, 32, 37, 15, -17, -27, 71, 7, -11, -21, -8, 13, -25, -10, -6, -2, -11, 21, -11, -8, 2, -19, 5, -4, -6, -33, 22, 14, -1, -53, -22, -2, -5, 6, 6, -22, -1, -10, -4, -3, -13, -21, 14, 18, -11, 35, 12, 23, -16, 5, 5, -3, -17, 10, -19, -14, -6, 12, 10, 9, 2, 20, 17, 35, -4, 14, 21, -19, 0, 5, 43, 1, -6, 1, -6, 26, 8, 0, 10, 40, 15, 2, 38, 16, 2, -1, 10, -1, -10, -2, -1, -8, -3, 0, 33, -12, 24, 3, -23, -3, -22, 3, -3, 7, -25, -18, -43, -15, -3, -22, -37, -41, -7, -34, -47, -21, -22, 12, -26, 1, 34, 36, 44, -11, 29, 29, 43, 38, 33, 26, 65, 11, 40, 28, -14, 3, -7, 39, 13, 23, 14, 29, 34, 24, 47, 31, 50, 26, 48, 25, 42, 0, 10, 24, 3, 33, 22, 14, 23, 48, 54, 18, 35, -9, -7, -15, 63, 8, -8, 1, -15, 6, -18, -29, -21, -26, 5, -12, -27, -6, -14, 4, -20, -3, 13, 21, -8, -22, 6, -14, 0, -27, 1, -17, -24, -6, -24, 2, -23, 8, 4, 24, 8, -11, 25, 0, 10, -12, 10, -22, -15, 27, -9, 20, 13, 5, -2, 23, -27, 13, 3, -2, -3, 0, 17, 13, -31, 17, -19, 22, 24, -6, -10, -2, -15, -13, -2, -2, 13, -6, 25, 1, -13, 1, 9, -9, -9, 9, -8, 1, -39, -25, 1, -6, -3, -2, -22, -2, -6, -2, -40, -4, 3, -4, 1, -6, -41, -34, -2, -18, -47, -70, -16, -25, -57, -18, -32, 37, -49, -5, 34, 22, 63, -47, 19, 58, 72, 66, 21, 49, 85, 29, 68, 48, -36, -7, 11, 36, 59, 80, 17, 36, 89, 53, 33, 50, 84, 21, 63, 17, 68, -9, -29, 20, 29, 70, 51, 60, 50, 76, 56, 21, 38, -8, -9, -21, 70, 3, -15, -9, -39, 8, 30, -35, -58, -48, 22, -19, -23, -15, -46, 15, -5, -8, -13, 2, -21, -21, 12, -18, -28, -33, 34, -15, -29, -17, -16, 20, 5, 9, 10, -2, 29, -28, 36, -3, -12, -44, 40, 2, -19, -10, 30, 9, -4, -5, -4, 33, -14, -5, -12, 6, -17, 4, -5, 20, 14, 12, -4, 0, 17, 0, -16, 15, -9, 1, -2, 2, 0, -24, 0, 24, 15, 9, 0, 12, 3, -2, -4, -4, -56, -5, -8, -10, -6, -1, -5, -31, -33, 0, -58, -38, -4, 3, 0, -43, -37, -66, -31, -28, -63, -64, -16, -46, -43, -24, -25, 29, -66, -17, 47, 26, 80, -63, 13, 49, 69, 25, 19, 31, 44, 58, 68, 58, -56, -13, -3, 30, 64, 53, 52, 45, 90, 64, 31, 36, 74, 41, 70, 8, 64, -12, -27, 69, 21, 59, 24, 57, 102, 85, 26, 27, 56, 2, -14, -52, 93, 9, -37, -6, -19, 14, 36, -22, -64, -33, 13, -5, -34, -38, -22, 5, -30, 0, 1, 15, -27, -13, 20, 10, -30, -28, 25, -7, -29, 10, -18, 23, 14, 0, 20, 8, 41, -16, 4, 0, -2, -18, 17, 2, -26, 0, 29, 36, -17, -1, -14, 24, 15, 3, 24, -10, -11, -10, 22, 11, -30, 11, 14, 23, 9, 10, -9, 17, -10, -23, 7, 16, -14, 10, 1, -5, 0, 24, -1, -4, -10, -17, -25, -7, -65, -17, -8, 0, -11, 13, -9, -15, -27, -14, -48, -37, 16, 1, -29, -15, -41, -49, -19, -50, -64, -70, -39, -30, -60, -33, -27, 32, -65, -6, 65, 27, 93, -51, 32, 69, 93, 19, 52, 14, 58, 17, 72, 96, -41, -12, 5, 47, 45, 61, 24, 34, 70, 67, 53, 54, 51, 24, 49, 23, 80, -7, -49, 30, 2, 54, 15, 41, 70, 65, 46, 28, 44, 31, -15, -64, 101, 3, -46, -16, -29, 17, -32, -11, -75, -36, 14, 0, -29, -24, -19, 17, -41, -7, -11, 2, -28, -19, -10, 8, -37, -47, -1, -1, -7, -3, -13, 16, 6, -1, 12, 0, 24, -26, -1, 12, 11, -20, 8, 12, -17, 8, 13, 34, -18, 8, 18, 25, 9, 6, -4, 3, -26, -9, -3, 0, -5, -5, 6, 16, 7, -3, -29, -8, 25, -13, 8, 18, 2, -13, -2, 24, -11, 1, 6, 8, -25, -3, -40, -30, -59, 4, -27, -1, 0, 0, -40, -5, -32, -2, -45, -40, -5, 4, -27, -47, -46, -32, -28, -41, -75, -59, -70, -30, -51, -61, 0, 8, -48, -6, 79, 26, 92, -84, 17, 28, 102, 18, 69, 39, 75, 13, 59, 90, -38, -1, -4, 46, 48, 78, 57, 34, 79, 87, 93, 38, 54, 26, 50, 32, 103, -9, -20, 37, -9, 61, 11, 31, 70, 80, 78, 20, 49, 18, -19, -68, 109, 26, -62, -16, -59, 23, -39, -15, -90, -57, -31, 0, -43, -62, -24, -5, -65, 5, -10, 11, -24, -30, -23, -3, -4, -36, -19, -3, -13, -1, -13, -12, -7, -1, 7, 6, 21, -23, -2, 14, 4, -15, -1, 19, -16, 9, 28, 36, -34, -5, 0, 39, -8, 22, 20, -3, -3, -26, 1, 14, -3, -2, -3, 1, 6, 0, 2, 15, -3, 11, -24, 8, -17, -13, 1, 17, 8, 5, 6, 8, -27, 2, -19, -24, -76, -6, -17, -18, 5, -14, -37, -11, -46, -14, -41, -58, 9, -5, -33, -10, -39, -48, -14, -30, -84, -50, -43, -22, -81, -47, -24, 12, -49, -14, 108, 34, 86, -89, 34, 30, 109, 32, 58, 40, 90, 23, 74, 93, -52, -7, 7, 30, 61, 72, 51, 32, 101, 80, 63, 52, 78, 66, 48, 28, 119, -12, -16, 46, -11, 53, 22, 44, 87, 95, 70, 34, 44, 23, -7, -92, 97, 21, -45, -17, -40, 28, -36, -9, -71, -28, -23, 15, -30, -47, 0, -17, -83, -1, -27, 8, -14, -29, -13, 33, -5, -44, -20, 10, -1, 29, -1, -5, -7, 3, 16, 16, 17, -20, 16, 17, 6, -15, -10, 28, -7, -3, 27, 23, -27, 4, 0, 21, -2, 10, -21, 4, -6, -9, -3, 19, -1, 8, -2, 19, 3, -2, 6, 12, -2, -5, 4, 0, 3, -19, -1, -5, 6, 3, -10, -1, -7, 5, -18, 1, -58, 3, -25, -1, -9, -10, -27, -11, -32, -10, -68, -69, -13, 8, -55, -23, -26, -33, -25, -25, -73, -88, -65, -50, -71, -39, -11, 22, -74, -18, 75, 36, 84, -93, 27, 34, 104, 44, 73, 10, 52, 37, 63, 104, -42, -4, 23, 62, 70, 75, 57, 50, 76, 96, 64, 41, 67, 86, 62, 57, 100, -15, -12, 44, -3, 73, 42, 54, 67, 81, 49, 24, 62, 11, -15, -78, 79, 22, -61, -28, -50, 32, -34, -15, -86, -31, -35, -15, -42, -59, -2, -37, -87, -2, -11, 2, -28, -14, -30, 16, 12, -19, -40, 5, -10, 16, -14, -15, -6, -13, 14, 13, 21, 2, 0, 8, 12, -41, -1, -2, -11, -7, 23, 19, -15, -2, -6, 3, 4, 0, 6, 23, 10, 14, -22, 17, 15, 17, 21, 8, 1, 3, -9, 3, -10, 0, -8, 7, 13, 16, 0, 10, 14, 5, -1, 6, -13, -1, -37, 2, -64, 23, -7, 7, -19, -2, -19, 0, -19, -2, -40, -64, 2, -6, -36, -57, -23, -36, -30, -33, -69, -93, -56, -7, -74, -44, -16, 23, -81, -25, 83, 27, 95, -85, 35, 55, 97, 16, 46, 42, 74, 29, 84, 102, -43, -9, 8, 40, 45, 85, 36, 32, 94, 90, 69, 67, 71, 51, 60, 67, 116, -4, -13, 50, -22, 83, 27, 56, 66, 86, 61, 26, 50, 25, -28, -68, 87, 24, -61, -38, -32, 20, -55, -28, -77, -33, -46, -4, -29, -31, 2, -31, -72, -2, -26, 3, -12, -24, -26, -1, 8, -30, -30, 6, -3, -4, -8, -34, -3, -1, 13, 21, 30, -11, -1, 11, -4, -10, -5, 19, -16, 10, 28, 15, -20, 4, -5, 11, 14, -11, -21, 12, -8, -27, -24, 16, -10, 23, -5, 6, 12, 9, -9, 15, 18, -1, -1, -1, 4, 0, 12, 0, -19, 10, -8, 11, 5, 15, -46, -6, -42, -8, -17, -9, -22, 25, 3, 7, -24, -34, -56, -52, 3, 11, -41, -11, -25, -52, -32, -21, -84, -63, -63, -9, -62, -32, -26, 25, -71, -18, 89, 35, 89, -86, 35, 38, 127, 15, 82, 39, 66, 45, 109, 100, -50, -4, 18, 47, 76, 71, 56, 40, 94, 80, 82, 55, 66, 41, 51, 56, 109, -21, -6, 34, -9, 70, 27, 41, 96, 85, 53, 41, 83, 36, -21, -74, 100, 19, -57, -30, -46, 36, -31, -26, -70, -51, -45, -3, -25, -49, 0, 0, -75, 7, -13, 11, -20, -14, -10, 5, -14, -40, -7, -16, -10, 2, -25, -25, 7, -11, 18, 20, 5, -28, -8, 19, 14, -21, 2, 4, -3, -15, 22, 27, -28, 6, 5, 12, -8, 7, 1, -1, -4, -6, 4, 15, -12, 8, 1, 18, 17, -15, 0, 11, 0, -10, 5, 7, 26, -5, 13, 6, 10, -3, 16, -4, -17, -4, -21, -22, -53, 14, -9, -2, 2, 36, -5, -2, -39, -9, -52, -61, 4, 8, -56, -21, -12, -30, -36, -37, -87, -63, -61, -27, -57, -20, -7, 39, -71, -19, 92, 29, 91, -96, 30, 47, 91, 33, 90, 23, 62, 27, 76, 83, -48, -3, 24, 75, 46, 73, 60, 27, 84, 89, 65, 46, 70, 58, 45, 65, 114, -13, -3, 46, -13, 82, 47, 34, 85, 76, 71, 34, 60, 41, -34, -72, 112, 28, -51, -27, -40, 29, -51, -14, -80, -49, -36, -3, -38, -41, -28, -6, -76, 0, -8, 2, -28, -24, -24, 32, -38, -40, -11, 14, -30, 12, 5, -24, -14, -16, 44, 20, 23, -34, -2, 16, 6, -17, -4, 4, 2, -4, 39, 24, -24, 3, 13, 20, 13, 4, -4, 17, -6, 9, 0, 24, -10, -19, 11, -6, 15, 6, -8, 19, -4, 15, -2, 13, 3, -2, -2, 27, 9, 8, 2, 8, -1, -1, -18, -8, -41, 6, -17, -3, 5, 5, 11, -19, -32, -4, -32, -64, 28, 7, -57, -13, -26, -29, -42, -31, -76, -71, -53, -15, -63, -30, -3, 22, -83, -18, 88, 42, 84, -76, 33, 47, 98, 34, 90, 43, 50, 38, 54, 87, -28, -3, 38, 50, 68, 71, 43, 28, 82, 79, 77, 81, 95, 51, 44, 76, 108, -13, -1, 30, -3, 59, 45, 31, 82, 73, 50, 42, 57, 51, -24, -81, 100, 21, -64, -19, -46, 31, -29, -9, -78, -21, -41, -9, -34, -27, -17, -10, -92, -6, -1, -4, -40, -23, -13, 7, -42, -47, -24, 1, -36, 7, 1, -23, 13, -6, 25, 21, 36, -23, -1, 39, 4, -19, -12, 10, -24, 2, 16, 29, -29, -2, 1, 6, 34, 10, -15, 9, 0, 19, 0, 14, 9, 5, 27, 28, 2, 3, 9, -3, -15, 22, 19, -4, 1, 10, 9, 11, 11, -8, -22, 1, -16, 2, -8, -6, -60, 13, -5, -28, -5, -2, -17, -15, -14, -8, -52, -64, -1, 7, -46, -21, -9, -55, -24, -24, -76, -64, -62, -29, -48, -29, -11, 38, -66, -11, 97, 48, 89, -84, 40, 53, 92, 28, 85, 41, 84, 32, 58, 103, -26, 0, 20, 65, 64, 81, 39, 55, 104, 92, 76, 63, 78, 44, 44, 68, 119, -20, 10, 41, -14, 66, 33, 36, 106, 61, 67, 15, 50, 39, -29, -85, 84, 33, -57, -15, -47, 9, -20, -19, -82, -52, -24, -24, -54, -46, -11, -26, -78, 22, -28, -10, 3, -8, -16, 14, -4, -35, -40, 1, -13, -2, 4, -18, -15, -13, 3, 1, 27, -25, 10, 33, 17, -23, -6, 25, 7, 11, 56, 27, -15, 10, -11, 25, 16, 11, -5, 15, 21, -7, -6, 14, 4, 20, 5, -8, 24, -11, -20, 25, -13, 11, -13, 32, -5, 16, -1, 19, -3, 5, -22, 12, 14, -2, -18, -7, -50, -9, -6, -16, -16, -11, 1, -9, -17, -10, -33, -65, 1, 13, -45, -13, -21, -42, -27, -26, -99, -66, -66, -27, -38, -56, -29, 42, -70, -15, 90, 20, 109, -73, 48, 27, 98, 26, 78, 35, 66, 27, 83, 93, -36, -2, 25, 56, 58, 60, 53, 57, 103, 85, 73, 51, 77, 35, 35, 83, 114, -5, 7, 63, -11, 73, 66, 50, 115, 73, 62, 22, 56, 46, -9, -69, 82, 19, -64, -29, -27, 21, -34, -25, -69, -28, -61, -17, -41, -33, -25, -28, -86, 0, -12, 29, -20, -30, -13, -15, 13, -21, -34, -14, -4, 4, -4, -19, 4, -14, 27, 40, 24, -6, 34, 8, 28, -2, 5, 5, 14, 16, 32, -1, -3, -2, 6, 13, 4, 22, 27, 16, -13, -3, 7, 17, 11, 13, 3, -12, 21, 3, -1, 16, -22, 12, 40, 16, 14, -12, 12, -3, -1, 7, -7, -4, 20, 1, -43, -27, -55, -8, -15, -4, -7, 12, -35, -22, -11, -9, -43, -64, 10, 3, -42, -24, -31, -35, -24, -31, -70, -80, -62, -21, -67, -49, -30, 39, -62, -10, 94, 53, 92, -84, 36, 68, 89, 20, 92, 26, 60, 61, 102, 79, -56, -1, 18, 39, 55, 64, 46, 52, 78, 71, 73, 26, 45, 33, 54, 61, 113, 4, -9, 30, -22, 65, 23, 45, 59, 74, 49, 43, 55, 28, -21, -73, 80, 17, -60, -28, -34, 16, -15, -35, -60, -32, -30, 0, -52, -49, -22, -17, -98, 2, -17, -14, -21, -32, -32, 13, -11, -34, -10, 12, -27, 3, 14, -7, 11, -7, 30, 12, 44, -16, 10, 8, 19, -15, 16, 26, -1, 18, 33, 21, -19, 0, 25, -1, 20, 5, 21, 14, 16, 16, 15, 29, 11, 25, 32, 9, 5, -2, 7, 4, -8, 7, 8, 0, 19, 29, 10, 22, 27, 3, -2, 1, -4, -6, -28, -21, -43, 5, -10, -47, 1, -1, -26, -38, -14, -22, -57, -75, 10, 0, -55, -61, -25, -30, -62, -38, -93, -75, -73, -33, -60, -42, -9, 51, -70, -19, 77, 43, 87, -79, 62, 58, 104, 11, 83, 21, 65, 40, 89, 92, -44, -5, 29, 68, 59, 63, 55, 49, 59, 59, 66, 32, 63, 47, 26, 48, 89, -8, -20, 56, -11, 75, 43, 45, 82, 72, 70, 10, 59, 22, -42, -70, 88, 19, -49, -16, -28, 25, -20, -21, -59, -37, -38, -28, -41, -31, -11, -23, -81, 0, -7, 2, -17, -21, -25, 29, -19, -34, -13, -11, -11, -3, -2, -2, 8, -7, 25, 26, 17, -6, 0, 16, 18, -12, 0, -12, -23, 14, 22, 57, -9, -5, 17, 9, 6, 15, 1, 12, 3, 0, 22, 9, 5, 15, 9, 15, 23, 1, -5, -4, 15, 16, -16, 3, -24, 20, 2, 3, 16, -1, -9, -7, 7, -6, -24, 13, -46, -18, 7, -3, -1, -2, -21, 2, -11, -8, -25, -63, 2, 7, -40, -26, -23, -27, -26, -56, -64, -49, -53, -24, -36, -40, 12, 31, -61, -33, 84, 21, 92, -83, 36, 21, 90, -30, 97, 24, 37, -1, 53, 106, -15, -5, 15, 49, 38, 41, 47, 33, 43, 92, 78, 43, 63, 25, -2, 49, 88, -8, 6, 27, -38, 64, 30, 29, 57, 48, 59, -8, 34, 38, -63, -89, 95, 13, -56, -30, -33, 30, -37, -13, -59, -20, -46, -3, -57, -54, -27, -8, -84, -5, -29, 0, -17, -32, -22, -16, -7, -28, -1, -12, -41, 2, -6, -7, 6, 6, 49, 10, 17, -48, 20, 0, -8, -30, 15, -2, -19, 0, 19, 24, -12, 1, 4, 9, -4, 6, 0, 24, 18, 4, 10, -9, -17, 11, 23, 9, 10, 3, 0, 19, -11, -14, -3, 16, 17, 7, 12, 23, 9, 2, 4, 11, 4, -17, -9, -5, -49, -2, -8, 3, 1, 14, -4, 0, -19, 1, -14, -45, -1, 0, -50, -18, 22, 5, -42, -5, -29, -40, -71, -27, -6, -41, 10, 21, -66, -5, 76, 36, 67, -62, 42, 16, 42, -11, 73, 27, 47, -4, 40, 67, -12, 7, 34, 31, 18, 35, 32, 0, 44, 31, 60, 45, 63, 20, -20, 53, 121, -4, 21, 24, -43, 33, 23, -8, 60, 80, 41, -5, 17, 49, -44, -82, 84, 13, -52, -25, -45, 61, -19, -17, -50, 33, -43, -1, -16, -42, 0, -22, -70, -4, -25, -19, -6, -2, 1, 11, -10, -7, -10, 19, 25, -11, 10, -20, -4, -13, 10, -6, 33, -30, 3, 17, -3, -21, -2, 10, 1, 1, 27, 33, -20, -9, -6, 4, 9, -5, -1, -1, 14, -10, 0, -1, 30, -2, -10, 18, 24, 5, -5, 1, -6, 7, 6, -1, -16, -1, 24, 2, -13, -1, 14, -7, -5, 4, -6, -2, -24, 19, -20, 1, 1, -20, -38, 2, -1, -3, -19, -41, 13, -4, -32, -6, 9, -20, -54, -12, -18, -29, -53, 3, -27, -40, -2, 1, -57, -4, 58, 19, 58, -45, 72, 17, 55, 9, 73, 13, 58, 10, 32, 71, -26, -10, 8, 16, 16, 32, 45, 4, 60, 61, 81, 32, 55, 24, -15, 62, 91, -7, 16, 3, -38, 32, 24, 39, 47, 45, 44, 19, 56, 54, -16, -59, 59, 1, -45, -19, -17, 27, -50, 34, -31, 24, -29, -10, -9, -9, 17, -21, -56, 13, -21, -18, 8, 21, -29, -6, 36, 9, -22, -2, 10, -5, 1, -26, 1, -12, 3, -3, 39, 22, -14, 28, 37, 35, -25, 14, 25, -13, 41, 29, -14, 3, -14, 7, 7, 18, -17, -1, -2, 19, 20, 17, 19, -8, 5, 8, 24, -11, -20, -3, -27, 1, -1, -1, 12, 50, -2, 1, 31, 11, 0, -10, 6, -15, -7, 1, 0, -1, -7, 1, -10, -2, -6, -2, 26, -3, -13, -41, -12, 2, -18, 5, 1, -1, -32, -18, -15, -34, -46, -14, -32, -16, 15, 12, -40, -16, 40, 16, 49, -1, 32, 20, 27, -5, 46, -19, 14, 12, 13, 68, 6, 2, 14, 39, 10, 6, 34, 13, 22, 26, 57, 19, 19, 27, -5, 52, 78, -4, 32, 24, -55, 17, 23, 15, 24, 24, 48, -3, -29, 48, -20, -37, 66, -1, -41, -12, -11, 14, -26, -49, -22, 13, -33, -31, -27, -28, -20, -29, -49, -7, -15, 2, 12, -17, -25, 8, 24, -23, -25, -16, -10, 12, -25, -15, 15, -8, -2, 4, 3, -21, -6, -9, 26, -2, 14, -28, -20, 8, -7, 7, 16, 4, 1, 16, -2, 14, 0, -3, 9, 25, 54, -15, -3, 8, -19, -40, 30, 6, -10, -1, 15, -35, 1, 2, -14, 12, 2, 1, -1, -1, 2, -10, 1, 4, -2, 2, -23, 6, -1, 0, -10, 7, -22, 2, -2, -2, -24, -17, -11, 6, 5, -14, 5, -13, -21, -13, -6, -10, -28, -19, -25, -14, -4, 9, -31, -1, 45, 16, 64, -16, 37, 64, 29, 48, 52, 51, 30, 14, 35, 55, 6, 3, 7, 33, -15, 23, 23, 0, 17, 28, 59, 14, 56, 50, -3, 34, 45, -9, 14, -30, -12, 10, -9, 2, 44, 34, 40, 28, 11, 18, -20, -33, 51, 6, -22, -52, -37, -18, -22, -11, -36, -32, -21, -12, -31, -14, -29, -16, -48, -5, 7, -32, -25, -17, -24, -26, -37, -28, -15, -20, -38, 3, 2, -1, 20, -2, 31, -14, 20, -50, 12, 15, 26, -27, 13, -29, 15, 6, 7, 14, 0, 9, -3, 12, 4, 11, -1, 1, 17, 56, 41, 2, 80, 3, 1, -16, 16, -10, -3, -1, -7, 18, -1, 0, 7, -3, 56, 0, 13, -1, 17, -5, 12, -11, 1, 0, -6, 18, -12, 2, 0, -10, -26, 1, 3, 1, 17, -2, 14, 6, 4, -27, 10, -14, 2, -13, -7, -23, -6, -2, -55, -18, 27, 32, -2, -9, 35, 25, 53, -25, 16, 15, 47, 16, 47, 42, 74, 35, 22, 21, 27, -1, 14, 30, -4, 42, 37, -1, 20, 52, 39, 33, 57, 13, 32, -2, 76, -6, -13, -12, -43, 14, -12, 21, 31, 38, 7, 27, 75, 17, -24, -29, 65, -3, -31, -19, -13, 8, -35, -11, -28, -14, -31, -27, -32, -35, -27, -8, -40, -1, -1, -41, -24, -4, -1, -32, -36, -15, -32, -45, -19, -21, 0, -30, 12, -15, 17, 65, 42, -27, 12, 14, 4, -8, 21, 1, 9, 45, 28, 12, -24, 14, -19, 50, -1, 21, 5, -2, 5, 37, 44, 50, 57, 10, 15, -15, 56, -3, -3, 1, 1, 5, -1, 2, 1, 29, 26, 2, 36, 1, -11, -10, 10, 7, 6, 3, -6, -9, -16, 2, 3, 32, 20, -1, -1, -1, -11, -16, -13, -5, -19, -11, 19, 1, -41, 2, -19, -14, -20, -2, -19, -18, -8, 19, -23, 10, 31, 43, 49, -7, 34, 26, 2, -42, 82, 2, -19, 45, 9, 45, 24, 0, 12, 67, -2, 30, 41, 1, 26, 29, 59, 2, 18, 33, 6, 16, 65, 2, -22, 11, -18, 29, 7, 2, -2, 27, 10, -1, 12, 28, -34, -51, 31, 5, -29, -50, -8, -5, -77, -49, 10, 37, -48, 1, -8, -47, -6, -11, -73, 1, -3, -29, 18, -4, -26, -32, -14, 24, -32, -1, 43, -40, -7, -4, -1, -19, 15, -1, 26, -28, 5, -4, 4, -32, 17, 1, -37, -13, 9, 40, 3, 3, -17, 22, -9, 2, 14, -1, -2, 28, 77, 0, 23, 20, -7, 2, 73, 1, -12, -2, -18, 26, 0, 1, -1, -4, 2, 2, 0, -2, -27, -4, 8, 
  -14, -10, -3, 19, -11, 2, -1, -16, 14, 2, 0, 15, 2, 16, 1, 10, -7, 1, 19, 1, 3, 0, 11, 3, 14, -6, 15, 19, 19, -17, -29, 12, -7, 0, -40, -30, 7, -15, -43, -40, -31, -11, -38, -34, -58, -33, 6, 17, 9, 6, -32, -45, -12, -11, -44, -7, -28, -64, -15, -45, -29, -19, -29, 1, 3, -12, -42, -7, -29, -19, -48, -41, -70, -33, -36, -52, -34, -1, 17, -34, -1, 5, 3, 12, -35, -3, -10, 10, -7, -34, 7, 9, 16, -13, 10, -20, -3, -8, -19, -18, 5, -31, 7, 3, 14, -32, 38, 17, 10, -8, -2, 5, 3, -15, -2, 14, 28, -7, 11, 4, -7, -27, 11, 19, 1, -16, 2, 21, 0, -11, -8, -10, -5, -6, -3, 18, -25, -7, -16, -12, -4, -6, -7, -8, 9, 0, -29, -17, 7, -1, -2, -15, 5, -13, -10, -4, 0, 18, -22, -12, 0, -27, -2, 15, 4, 2, 4, -6, -15, 2, 2, -10, 0, 7, 18, 22, -2, 9, 3, 18, -5, -1, 25, 29, 15, 4, 3, 2, 31, -13, -12, 11, 6, -25, -13, -56, 25, 0, -36, -21, -34, -31, -52, -30, -26, -36, -16, -32, 1, -5, -22, -31, -20, -27, -6, -6, -28, -53, -23, -24, 1, -47, -14, -25, 4, 1, -47, -20, -27, -51, -62, -51, -49, -58, -23, -30, 22, -5, 9, -51, 6, 21, 27, 10, -32, 10, 36, 7, -22, -10, 4, -5, 10, -14, -20, -4, 3, -4, 17, 32, 4, 8, 8, 1, -34, -14, -10, 12, 1, 4, -2, -2, 0, 12, 13, 1, -3, -5, 5, 1, -2, -5, -10, 4, 14, 6, -26, 8, 1, -15, 4, -5, 0, -14, -9, -7, -17, -2, -17, -43, -41, -17, 9, -25, 4, 6, 0, -20, -8, -9, -1, 2, -13, -29, -9, -7, -3, -3, 20, 7, -13, -6, 0, 8, 0, -3, -2, -5, 15, 5, 2, 7, 1, 9, 28, -13, 7, 2, 31, 2, 12, 14, 2, 7, 23, 30, 17, 30, 17, 8, 12, 14, -1, -21, 10, -39, 27, 16, -51, -28, -1, -20, -18, -31, 5, -35, -23, 13, 7, -4, -53, -34, -8, -20, -40, -17, -22, -58, -17, -48, -35, 7, -12, -27, 7, 23, -37, -30, -7, -11, -26, -51, -33, -35, -29, -37, -13, 14, 24, -74, -7, 10, 23, 10, -13, 24, 9, 6, 3, 10, -24, 10, 8, 0, 19, -5, 3, 5, 32, -26, -13, 4, 54, 22, 2, 7, -9, -5, 19, -2, 12, 2, -2, 14, 23, -14, -17, 15, -38, -13, -24, 10, -4, -1, -2, 15, -9, 23, 11, 9, -11, -8, -11, -3, -18, -18, -36, 8, -14, -20, 20, -1, -9, -42, 0, 4, -2, 8, -26, -13, -1, -10, -44, -10, -1, -35, -15, -3, 3, -10, -1, 9, -2, 3, 8, 3, -1, -32, 8, -21, -1, 26, 3, 23, -1, 6, -4, 25, 20, 44, 12, 4, 19, 34, 42, 5, 35, 45, 18, 19, -9, 21, -2, -37, -35, -39, 14, -28, -28, -44, -36, -38, -26, -66, -11, -38, -27, 18, -2, 6, -39, -9, -21, -13, -29, -32, -23, -47, -31, -46, -27, -44, -29, -40, -1, -11, -21, -5, -32, -24, -14, -26, -45, -55, -17, -34, 7, 8, 14, -64, -9, 9, -4, 16, -8, 16, 25, 21, 28, -6, 16, 32, 1, 13, -3, 19, 1, -17, -21, 4, 25, -4, 16, 0, 28, -4, 17, 26, 3, 20, -6, 26, -9, -10, -23, -11, 10, -23, -2, -14, 11, -10, 22, 14, -32, 12, -18, -9, -3, 2, -24, 26, -10, -7, -2, 6, 0, -17, -14, 30, -17, 17, -21, -24, 6, 10, -2, 12, 17, 1, -1, -15, 4, -21, 3, 14, 1, -7, 9, 12, -12, 9, 0, 40, 27, -2, 7, -1, 2, 20, 3, 9, 4, 38, 4, -5, 7, -3, 4, 42, 33, 3, 20, 48, 67, 15, 29, 55, 16, 35, -36, 48, 4, -35, -22, -64, 46, -16, -57, -67, -68, -18, -49, -84, -25, -70, -47, 34, 3, -10, -38, -61, -81, -16, -38, -92, -57, -32, -53, -87, -20, -59, -19, -70, 12, 28, -19, -27, -72, -52, -57, -51, -77, -58, -23, -37, 6, 8, 23, -69, -4, 11, 8, 38, -6, -31, 40, 58, 48, -26, 20, 24, 13, 46, -16, 3, 6, 11, -5, 21, 20, -11, 16, 27, 33, -32, 17, 29, 20, 13, -19, -8, -10, -12, -3, -27, 28, -37, 2, 11, 42, -41, -2, 19, 10, -27, -12, 2, 8, 2, -32, 13, 5, 13, -10, 17, -4, 3, -19, -13, -13, 4, 3, -17, -2, 14, -14, 5, 2, 0, -4, -2, 24, 2, -26, -16, -9, -1, -8, -3, 3, 5, 4, 57, 7, 8, 10, 5, 1, 4, 34, 33, 4, 58, 41, 3, 0, -3, 43, 37, 66, 28, 29, 59, 65, 15, 48, 43, 24, 22, -28, 67, 16, -45, -25, -80, 60, -11, -49, -67, -25, -17, -30, -46, -56, -68, -58, 60, 16, 3, -31, -60, -51, -50, -45, -88, -63, -29, -37, -76, -37, -69, -7, -66, 15, 26, -69, -22, -59, -25, -54, -100, -83, -22, -27, -55, -1, 12, 49, -91, -9, 36, 6, 17, -15, -32, 24, 61, 35, -14, 6, 33, 40, 21, -3, 31, 1, 0, -15, 25, 15, -21, -6, 27, 26, -30, 4, 27, -9, 21, -21, -13, -3, -19, -8, -42, 16, -3, 5, 0, 23, -21, 1, 25, 0, -29, -36, 14, 5, 17, -28, -13, -1, -26, 11, 11, 14, -22, -13, 31, -8, -17, -25, -5, -8, 11, -16, 9, 22, -7, -14, 14, -11, -1, 6, 2, -24, 2, 1, 8, 17, 27, 11, 61, 18, 10, 1, 7, -10, 9, 17, 27, 14, 47, 36, -17, -2, 28, 19, 41, 47, 15, 49, 65, 70, 40, 31, 59, 29, 26, -36, 63, 9, -69, -27, -94, 54, -31, -67, -92, -18, -51, -13, -55, -21, -68, -97, 36, 10, -6, -47, -42, -65, -21, -35, -68, -66, -55, -56, -52, -24, -50, -21, -80, 11, 47, -35, -5, -56, -14, -41, -69, -66, -44, -27, -42, -26, 17, 66, -101, -1, 47, 14, 30, -21, 30, 12, 73, 34, -14, 1, 29, 25, 18, -18, 38, 6, 8, -3, 29, 21, 10, -9, 32, 48, 3, -2, 7, 1, 17, -19, -6, 2, -10, 0, -27, 26, 1, -12, -8, 20, -5, -9, 19, -7, -14, -33, 21, -8, -17, -21, -7, -3, 6, -2, 24, 10, 6, 5, 4, 1, -4, -15, -13, 3, 27, 8, -23, 13, -7, -16, -4, 15, 5, -28, 8, -3, -7, -5, 25, 1, 36, 30, 59, -5, 28, 4, 1, -4, 42, 7, 32, 2, 45, 43, 1, -7, 31, 49, 42, 34, 30, 40, 78, 57, 68, 31, 53, 60, -1, -10, 48, 5, -77, -24, -96, 85, -14, -27, -102, -17, -69, -39, -78, -10, -60, -91, 36, 2, 7, -42, -47, -78, -58, -33, -78, -91, -95, -38, -52, -29, -46, -31, -103, 14, 20, -35, 8, -64, -10, -28, -70, -78, -77, -20, -52, -19, 20, 66, -109, -25, 61, 19, 62, -22, 41, 11, 91, 55, 29, 1, 44, 62, 28, 8, 63, -3, 8, -12, 21, 32, 24, -2, 6, 38, 20, 2, 12, 1, 14, 13, 7, 5, -6, -8, -19, 23, 3, -16, -2, 17, 1, -18, 16, -10, -31, -34, 32, 1, -2, -41, 8, -22, -18, 2, 3, 26, 1, -14, 7, 2, 8, -3, -7, -4, -4, -14, 1, -10, 25, -9, 17, 9, 1, -16, -7, -8, -10, -7, 28, -2, 16, 25, 75, 3, 18, 17, -5, 17, 37, 11, 47, 12, 38, 62, -12, 5, 33, 10, 37, 49, 14, 30, 86, 52, 43, 23, 77, 45, 26, -13, 50, 12, -103, -33, -88, 90, -36, -29, -106, -28, -56, -42, -90, -26, -71, -93, 50, 12, -7, -30, -65, -69, -47, -32, -97, -83, -65, -52, -80, -62, -47, -30, -116, 14, 18, -46, 12, -55, -19, -42, -87, -96, -69, -38, -43, -25, 10, 92, -97, -22, 46, 18, 40, -27, 37, 4, 73, 25, 23, -15, 34, 48, 4, 15, 83, -3, 25, -10, 18, 28, 13, -32, 9, 43, 24, -10, -1, -32, 1, 5, 4, -3, -13, -20, -15, 17, -19, -15, -3, 13, 11, -28, 11, 4, -26, -22, 27, -6, -2, -24, 4, -11, 23, -3, 8, 5, -1, -21, 5, -13, 3, -22, -4, -1, -6, -16, 7, 3, -5, -1, -4, 16, 0, 4, -7, -2, 9, -2, 8, -7, 18, -1, 57, -3, 25, 4, 14, 10, 28, 10, 30, 9, 67, 69, 13, -6, 54, 24, 25, 37, 23, 29, 68, 86, 63, 48, 74, 38, 9, -21, 74, 19, -78, -34, -87, 95, -28, -36, -102, -45, -73, -9, -52, -40, -63, -101, 40, 2, -19, -62, -66, -75, -57, -49, -77, -96, -60, -39, -65, -89, -58, -60, -103, 18, 7, -44, 4, -72, -41, -50, -67, -83, -48, -26, -63, -15, 14, 77, -76, -26, 63, 27, 50, -30, 32, 14, 87, 34, 34, 13, 41, 60, 6, 36, 92, 0, 13, 1, 28, 9, 30, -20, -10, 22, 41, -3, 7, -16, 11, 12, 6, 8, -11, -16, -17, 1, 1, -10, -12, 38, 1, 5, 10, 7, -22, -20, 15, 4, 4, -4, -6, -2, -6, -19, -11, -14, 21, -14, -17, -16, -20, -12, 2, -2, 9, -2, 6, -1, 9, -6, -14, -15, 0, -10, -18, -5, 3, -3, 12, 2, 37, 1, 66, -21, 6, -7, 16, 1, 19, 3, 16, 6, 40, 63, -7, 4, 36, 54, 23, 37, 29, 36, 71, 95, 53, 8, 74, 44, 18, -22, 81, 26, -87, -23, -95, 85, -34, -53, -95, -15, -48, -39, -76, -28, -82, -102, 42, 9, -9, -42, -46, -83, -33, -30, -93, -91, -70, -70, -72, -48, -58, -71, -116, 5, 11, -47, 23, -81, -26, -55, -67, -86, -62, -28, -52, -28, 28, 67, -86, -24, 57, 34, 31, -21, 54, 27, 75, 34, 43, 3, 25, 29, -5, 31, 68, 2, 27, -4, 14, 19, 26, 4, -6, 28, 32, -1, 8, 3, 4, 35, -1, 0, -8, -21, -29, 11, 2, -10, 1, 11, 8, -17, 17, -10, -29, -14, 20, -5, 3, -11, -17, 8, 22, -16, 9, 32, 28, -17, 11, -26, 3, -6, -10, -8, 5, -17, -19, 0, -2, 3, -2, 2, -12, 3, 15, -7, 9, -10, -8, -13, 47, 8, 44, 9, 19, 10, 21, -22, -5, -2, 29, 38, 56, 51, -2, -11, 40, 12, 25, 52, 34, 19, 82, 63, 61, 8, 61, 34, 26, -21, 71, 23, -89, -33, -91, 85, -33, -38, -125, -13, -78, -41, -66, -44, -106, -99, 52, 7, -19, -45, -75, -73, -55, -40, -95, -82, -82, -52, -69, -42, -53, -58, -105, 20, 6, -35, 4, -71, -25, -37, -97, -83, -56, -40, -79, -34, 19, 74, -98, -21, 51, 29, 41, -38, 33, 30, 71, 50, 43, 6, 25, 50, -1, 3, 77, -5, 14, -11, 17, 18, 13, -10, 12, 40, 8, 17, 7, 0, 27, 24, -9, 8, -16, -22, -6, 27, 9, -23, -16, 20, 1, 0, 2, 18, -19, -28, 27, -11, -3, -13, 4, -9, 1, 1, 0, 3, -5, -18, 14, -9, 3, -15, -17, 15, -1, -12, 1, 10, -8, -12, -24, 4, -11, -6, -12, 4, -15, 5, 15, 0, 22, 19, 54, -15, 13, 5, 1, -33, 4, 3, 35, 10, 51, 59, -7, -7, 55, 20, 12, 34, 32, 39, 84, 64, 59, 29, 58, 18, 9, -40, 72, 17, -93, -27, -88, 95, -33, -48, -89, -33, -94, -25, -64, -29, -76, -82, 49, 1, -27, -77, -43, -73, -58, -29, -83, -92, -64, -42, -66, -56, -45, -69, -117, 11, 5, -46, 15, -80, -49, -33, -84, -78, -69, -33, -59, -40, 39, 70, -108, -32, 53, 22, 37, -27, 48, 17, 76, 45, 34, 3, 39, 43, 30, 5, 74, 3, 6, 1, 29, 21, 20, -32, 38, 43, 9, -15, 30, -10, -6, 24, 10, 20, -40, -17, -20, 31, 0, -17, -4, 17, 6, -3, 2, 2, -39, -25, 25, -2, -8, -24, -13, -3, 4, -19, 8, -4, 2, -25, 7, 17, -8, 10, -12, -4, 5, -19, -1, -17, -1, -16, 0, 2, 0, -28, -10, -7, -2, -9, 5, 1, 20, 9, 40, -2, 13, 3, -6, -6, -10, 23, 32, 8, 37, 67, -29, -11, 59, 15, 23, 28, 43, 33, 80, 72, 56, 16, 65, 31, 3, -21, 81, 14, -86, -42, -79, 73, -31, -47, -99, -33, -90, -43, -53, -37, -51, -89, 30, 3, -35, -49, -67, -72, -44, -28, -76, -75, -77, -81, -97, -53, -45, -78, -108, 10, 4, -29, 6, -61, -45, -31, -82, -75, -53, -41, -59, -50, 23, 79, -102, -22, 65, 18, 48, -28, 31, 12, 79, 23, 42, 10, 35, 29, 19, 11, 93, 5, 4, 3, 38, 26, 15, -3, 40, 51, 26, 0, 32, -5, -1, 24, -13, 6, -24, -18, -34, 26, -1, -38, -3, 23, 12, -12, 24, -4, -21, -28, 25, 6, -4, -8, -33, -11, 13, -8, -3, -17, -2, -14, -5, -6, -27, -25, -4, -4, -6, -2, 15, -24, -20, 8, -2, -10, -10, -13, -11, 12, 19, 1, 12, -2, 9, 9, 62, -13, 6, 28, 8, 2, 16, 13, 15, 9, 52, 62, 1, -8, 50, 20, 10, 54, 29, 29, 77, 59, 60, 34, 49, 27, 11, -37, 68, 13, -95, -49, -91, 86, -44, -51, -90, -26, -84, -39, -80, -30, -55, -99, 28, 3, -21, -67, -67, -82, -35, -52, -102, -95, -76, -60, -79, -46, -44, -67, -118, 20, -11, -39, 14, -65, -34, -35, -105, -58, -70, -17, -50, -36, 31, 84, -81, -33, 56, 17, 45, -9, 16, 24, 82, 53, 27, 23, 55, 41, 13, 23, 78, -20, 26, 4, -3, 7, 15, -12, 0, 33, 38, 1, 13, 6, -5, 19, 19, 14, -2, 2, -31, 26, -10, -33, -21, 25, 10, -27, -6, -10, -57, -24, 15, -8, 9, -23, -21, -9, 0, -14, -20, 5, 7, -15, -8, -25, -5, 7, -22, 12, 20, -26, 10, -13, 11, -30, 10, -20, 1, -17, 7, -5, 20, -11, -15, 6, 21, 6, 45, 11, 6, 16, 12, 12, 1, 11, 14, 10, 33, 60, -3, -11, 47, 16, 23, 43, 26, 30, 99, 67, 65, 27, 36, 55, 29, -39, 74, 16, -85, -21, -107, 73, -50, -30, -101, -24, -77, -37, -61, -30, -82, -90, 35, 5, -27, -57, -58, -59, -53, -55, -103, -88, -73, -51, -77, -37, -36, -86, -113, 1, -10, -60, 13, -71, -65, -48, -115, -72, -63, -25, -53, -46, 12, 71, -81, -16, 61, 27, 26, -21, 32, 26, 67, 31, 64, 15, 39, 28, 25, 27, 86, -1, 14, -27, 20, 29, 14, 13, -13, 23, 31, 13, 1, -4, 2, 18, -6, 11, -29, -42, -22, 4, -33, -7, -27, 1, -5, -6, -14, -21, -31, 0, 5, 2, -5, -12, -5, -21, -28, -18, 17, 3, -8, -18, -10, -10, -5, 8, -19, -4, 4, -14, 21, -15, -40, -12, -10, 12, -8, 1, -1, -9, 9, 0, -16, 3, 41, 24, 53, 10, 13, 2, 7, -10, 31, 24, 13, 7, 43, 61, -8, -2, 42, 24, 35, 37, 28, 30, 73, 80, 63, 20, 64, 47, 32, -41, 64, 7, -92, -50, -92, 87, -31, -69, -90, -20, -93, -24, -57, -63, -101, -78, 55, 2, -18, -40, -56, -66, -48, -48, -80, -70, -73, -27, -47, -33, -54, -59, -115, -1, 6, -27, 24, -69, -20, -47, -63, -73, -48, -39, -56, -28, 23, 76, -79, -13, 56, 26, 35, -13, 17, 30, 63, 32, 28, -5, 53, 48, 19, 18, 99, -1, 17, 18, 19, 33, 31, -11, 12, 35, 13, -12, 26, -1, -16, 5, -7, 9, -32, -9, -43, 17, -11, -9, -21, 18, -19, -28, 3, -18, -34, -19, 21, 1, -24, 1, -22, -7, -25, -18, -16, -11, -14, -28, -12, -24, -32, -10, -10, 3, -7, -4, 8, -4, -6, 1, -14, -25, -11, -21, -28, -3, 4, -1, 3, 8, 31, 21, 46, -4, 12, 51, -1, -2, 22, 37, 12, 20, 57, 74, -8, 1, 56, 60, 25, 31, 60, 39, 97, 78, 73, 31, 58, 44, 10, -52, 70, 14, -73, -41, -85, 81, -63, -63, -107, -10, -83, -20, -62, -44, -87, -94, 49, 6, -27, -69, -58, -64, -57, -49, -60, -58, -68, -33, -67, -48, -25, -44, -92, 10, 21, -56, 12, -79, -38, -45, -83, -70, -72, -10, -63, -25, 42, 71, -85, -23, 49, 18, 27, -24, 25, 23, 60, 35, 40, 28, 42, 32, 8, 24, 81, 4, 11, 0, 18, 23, 21, -23, 20, 33, 16, 10, 11, 5, -1, 3, -11, 9, -25, -22, -17, 6, 0, -16, -20, 11, 3, 14, 21, -10, -25, -58, 8, 4, -14, -5, -4, -16, -3, -11, -4, -2, -20, -12, -7, -15, -7, -13, -20, 2, 5, 1, -13, -18, 16, -3, 27, -17, -1, 0, -17, 3, 6, 6, -12, 9, 25, -13, 44, 19, -3, 3, 3, 1, 21, -2, 8, 7, 27, 64, 1, -2, 38, 22, 19, 30, 26, 56, 66, 51, 50, 28, 31, 40, -13, -31, 63, 37, -88, -21, -92, 78, -34, -17, -86, 28, -97, -23, -38, 1, -51, -106, 11, 6, -15, -51, -37, -44, -50, -29, -43, -88, -75, -46, -65, -28, 6, -47, -91, 6, -5, -29, 40, -65, -29, -28, -55, -44, -57, 6, -31, -42, 59, 89, -98, -15, 58, 30, 32, -31, 37, 11, 56, 16, 49, 6, 57, 57, 26, 8, 81, 7, 24, 0, 21, 35, 21, 16, 7, 30, 3, 13, 41, -1, 2, 7, -9, -5, -48, -10, -14, 46, -20, 1, 6, 34, -16, 1, 19, -2, -17, -21, 12, 3, -3, -4, 3, -3, 3, -21, -19, -2, -7, 10, 20, -14, -20, -11, -10, -3, 0, -16, 13, 12, 5, -16, -19, -5, -10, -20, -9, -4, -2, -16, -7, 16, 7, 5, 48, -1, 12, -8, -2, -18, 5, -1, 18, 2, 11, 44, 0, -2, 48, 16, -18, -7, 43, 2, 25, 38, 68, 28, 7, 40, -12, -20, 63, 8, -76, -35, -63, 63, -40, -14, -43, 12, -72, -29, -46, 2, -41, -71, 10, -6, -35, -29, -21, -31, -33, -1, -43, -28, -60, -49, -66, -19, 20, -49, -122, 7, -24, -24, 44, -34, -24, 6, -61, -77, -45, 3, -16, -50, 46, 82, -85, -13, 55, 23, 43, -60, 23, 19, 50, -29, 47, 2, 17, 39, 2, 20, 67, 4, 24, 21, 8, 2, -3, -8, 9, 6, 8, -17, -22, 12, -6, 23, 0, 17, -8, 3, -29, 35, -4, -16, 3, 24, 1, -12, -2, -6, -31, -36, 16, 10, 6, 0, -12, 4, 1, 0, -14, 14, -1, 0, -26, 0, 10, -16, -26, -5, 5, 1, 9, -7, -6, -2, 16, 1, -23, -1, 12, 3, -13, 10, 5, -3, 4, 3, 23, -20, 19, 3, -2, 22, 40, 1, 2, 1, 19, 40, -14, 8, 31, 8, -9, 16, 52, 9, 14, 26, 54, 3, 23, 41, 4, 0, 55, 4, -62, -20, -58, 45, -74, -21, -53, -10, -73, -11, -58, -8, -28, -71, 28, 15, -10, -19, -18, -34, -48, -2, -57, -60, -77, -34, -51, -28, 17, -65, -88, 5, -13, -4, 39, -30, -25, -37, -49, -46, -46, -20, -53, -52, 20, 57, -58, -3, 43, 18, 18, -27, 46, -38, 34, -24, 30, 11, 11, 11, -17, 23, 56, -9, 20, 17, -9, -20, 30, 9, -33, -6, 21, 3, -12, 6, 3, 28, 0, 12, 0, 2, -39, -22, 12, -30, -36, -36, 22, -11, -27, 10, -38, -31, 16, -1, 11, -6, -12, -18, 20, 1, 1, -16, -19, -16, -18, 9, -8, -11, -27, 12, 25, 2, 29, -1, -1, -2, -9, -49, 1, 1, -30, -12, -3, 14, -10, 14, 5, 1, 0, 0, 7, -1, 9, 2, 6, 2, -29, 0, 14, 40, 13, -1, 15, -2, -2, 4, 35, 20, 15, 34, 47, 13, 34, 17, -15, -15, 39, 11, -38, -15, -44, 4, -32, -21, -29, 1, -43, 16, -12, -15, -16, -67, -10, 1, -14, -37, -9, -11, -33, -11, -20, -22, -56, -14, -17, -30, 6, -54, -77, 3, -37, -22, 59, -18, -25, -17, -25, -22, -49, 2, 26, -48, 23, 33, -62, -2, 41, 14, 12, -12, 23, 50, 23, -10, 33, 34, 23, 28, 22, 27, 50, 6, 20, -2, -10, 17, 24, -9, -23, 20, 22, 11, 14, -8, 26, 15, -19, 5, 3, -4, 0, 19, 5, 5, -25, 3, -16, 29, 16, -11, 5, -10, -15, -2, -5, -15, 4, -19, 1, -2, -6, -26, -55, 12, 4, -11, 19, 36, -33, -3, 10, -2, -17, 35, 0, 2, 14, -16, -2, -2, 0, 0, 0, 8, 0, -4, 4, 1, 23, -4, -1, -2, 10, -10, 19, -1, 2, -2, 22, 16, 11, -6, -1, 17, -6, 15, 26, 12, 9, 9, 28, 16, 22, 13, 3, -6, 28, 3, -43, -17, -65, 15, -37, -65, -25, -47, -51, -52, -32, -12, -32, -55, -6, 0, -10, -30, 10, -20, -20, 1, -13, -32, -56, -14, -56, -50, -2, -35, -46, 8, -16, 33, 13, -9, 13, 0, -45, -32, -40, -27, -9, -16, 20, 32, -48, -7, 21, 52, 39, 18, 22, 14, 36, 32, 20, 14, 35, 14, 29, 17, 44, 10, -9, 35, 27, 16, 24, 26, 36, 31, 15, 22, 37, -8, -4, 0, -24, 0, -28, 18, -20, 47, -7, -16, -25, 27, -10, 26, -17, -2, -11, -14, 2, -6, 2, -15, -9, -11, 1, -2, -15, -59, -41, 2, -78, -4, -1, 17, -17, 10, -1, 3, 8, -18, 1, -1, -7, 3, -57, 1, -12, -1, -17, 5, -11, 11, -2, 1, 4, -18, 8, 2, 2, 11, 28, 0, -6, 1, -16, 3, -15, -5, -2, 23, -11, 10, 1, 15, 6, 23, 7, 0, 55, 17, -23, -31, 7, 8, -35, -27, -51, 26, -18, -11, -45, -16, -43, -42, -74, -38, -19, -18, -29, -2, -10, -25, 8, -44, -33, -1, -23, -54, -39, -35, -57, -14, -27, 4, -76, 5, 15, 16, 46, -12, 13, -21, -31, -37, -7, -26, -72, -17, 23, 26, -66, 2, 33, 24, 13, -8, 33, 11, 30, 13, 31, 27, 34, 36, 31, 9, 40, 1, 3, 38, 27, 4, 0, 30, 39, 19, 33, 40, 17, 21, 2, 28, -17, 18, -18, -64, -40, 29, -10, -15, -2, 7, -19, -4, -10, -44, -29, -11, 22, -11, 23, -51, 2, -20, -5, -3, -4, -35, -48, -50, -60, -9, -16, 17, -59, 3, 4, -2, -1, -3, 2, 1, 1, -28, -27, 2, -38, 2, 10, 10, -7, -9, -2, 1, 9, 11, 17, 0, -3, -30, -20, -2, 2, -1, 10, 16, 12, 5, 16, 15, -22, -2, 43, 2, 18, 17, 22, -2, 19, 15, 6, -21, 23, -5, -36, -46, -49, 6, -33, -27, -4, 47, -81, 2, 16, -46, -4, -51, -22, 0, -11, -68, 2, -27, -42, 2, -23, -27, -57, -2, -19, -34, -7, -16, -64, -6, 22, -12, 16, -28, -5, 3, 3, -28, -10, -1, -9, -30, 35, 50, -30, -6, 28, 54, 10, 5, 74, 44, -14, -40, 50, -2, 8, 45, 9, 13, 72, -1, 5, 25, -20, 3, 31, 32, 13, -24, 29, -2, -45, 42, 7, 8, 3, 21, -16, 5, -25, 28, -4, 1, -9, 30, -16, 1, 38, 13, -10, -40, -1, -1, 17, -22, 9, -1, -13, 2, 4, -25, -81, 1, -28, -21, 9, -6, -73, 2, 10, 2, 17, -24, 0, -2, 3, 3, 2, 1, -2, 2, 23, 5, -10, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 2,4000 } };
const TfArray<1, float> quant4_scale = { 1, { 0.013939839787781239, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[16] = { 10415, 590, -3252, 189, 898, -3044, -8620, 100, 115, -17, -7575, -631, -5068, 438, 453, 134, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 8.5369629232445732e-06, 1.124625214288244e-05, 1.4297889720182866e-05, 1.3566827874456067e-05, 9.6675803433754481e-06, 1.2467175110941753e-05, 9.1867450464633293e-06, 1.286431506741792e-05, 1.2702445928880479e-05, 1.1160585927427746e-05, 7.2140987867896911e-06, 1.2770347893820144e-05, 1.4081238077778835e-05, 9.7186875791521743e-06, 1.0006984666688368e-05, 1.039961807691725e-05, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[16*3*3*8] = { 
  /* [0][0][][] */ -92,-7,1,54,67,13,7,-29, -117,-53,-16,-8,-5,-39,-88,-50, -12,-79,-26,-37,-46,-49,34,-15, 
  /* [0][1][][] */ -78,-24,-8,20,-11,23,-4,-23, -85,-49,-14,-3,-6,-33,-23,-45, -18,-64,-20,-30,-27,-48,10,-13, 
  /* [0][2][][] */ -94,-100,-53,28,-9,18,2,-8, -87,-127,-53,-1,-14,-22,-18,-24, -20,-110,-56,-20,-37,-36,29,-8, 
  /* [1][0][][] */ 24,-74,-68,-21,-98,-10,9,20, 13,-27,-81,-38,-57,-2,8,41, -9,8,0,-19,16,-11,11,-36, 
  /* [1][1][][] */ 17,-31,-17,-22,-61,-15,-5,18, 9,-50,-117,-29,-127,4,6,10, -3,-4,-32,-1,1,10,7,-3, 
  /* [1][2][][] */ 22,-28,-13,-6,-34,-8,-13,16, 17,-36,-67,-7,-81,7,8,18, 9,-16,-64,11,-9,25,52,12, 
  /* [2][0][][] */ 9,5,8,-124,-5,-126,-1,-76, 14,7,9,-126,-6,-126,7,-88, 5,3,7,-64,0,-69,9,-68, 
  /* [2][1][][] */ 19,9,5,-8,-2,-7,12,-2, 9,4,8,14,2,7,9,3, -23,-15,-8,17,5,25,3,2, 
  /* [2][2][][] */ -20,-5,-25,24,-16,21,-5,16, -73,-127,-108,14,-11,23,-16,10, -96,-127,-111,29,-13,16,-25,14, 
  /* [3][0][][] */ 1,-6,1,-22,-6,-34,-19,-24, 15,6,1,-36,-41,-73,2,-42, 51,4,3,-127,-20,-59,25,-23, 
  /* [3][1][][] */ 21,-2,-1,-52,-13,-66,3,-38, -15,9,-1,-120,-52,-94,10,-44, 6,3,-6,-25,-4,10,14,-23, 
  /* [3][2][][] */ 17,-7,-10,-63,-24,-57,28,-21, 102,-5,-13,-46,-28,-11,5,-14, -38,-20,-19,35,-1,36,3,-8, 
  /* [4][0][][] */ -7,80,19,-48,5,-65,-42,-42, -44,-9,14,-30,-8,-55,-65,-30, -34,-37,-2,-21,-13,-44,-32,-25, 
  /* [4][1][][] */ -2,-8,92,2,11,8,0,-25, -77,2,4,-9,6,-51,-119,-51, -55,-40,0,-8,-1,-44,-86,-25, 
  /* [4][2][][] */ -2,71,-27,4,18,40,46,11, -75,-5,41,16,18,-17,-127,-42, -48,-25,1,-6,-2,-48,-113,-33, 
  /* [5][0][][] */ -1,-38,-64,4,-11,-4,40,16, -12,-25,-59,-12,-8,61,17,-1, -35,-26,-23,3,10,18,19,8, 
  /* [5][1][][] */ -18,-65,-77,12,-26,39,7,15, -29,-96,-127,33,-37,-58,5,24, -51,-57,-50,25,-1,49,-1,13, 
  /* [5][2][][] */ -34,-60,-33,14,-27,16,-33,11, -38,-78,-40,14,-51,36,-27,7, -41,-79,-44,9,-12,32,-26,14, 
  /* [6][0][][] */ -3,-5,6,-1,-4,15,-6,-7, -8,98,-8,-3,-3,3,-14,-15, -8,-11,-10,-22,-4,-32,-22,-21, 
  /* [6][1][][] */ 4,-5,12,-3,-10,17,5,1, 6,-32,13,-12,0,-11,1,-10, -9,-25,86,0,-1,1,-6,-18, 
  /* [6][2][][] */ -7,-19,-10,-2,-12,8,4,5, -10,127,-23,4,-6,18,7,10, -11,-9,-13,2,2,8,7,0, 
  /* [7][0][][] */ 8,-2,1,-18,-10,-10,0,3, 4,-3,0,-14,0,-1,-16,0, -1,-6,0,-6,-2,4,-11,-5, 
  /* [7][1][][] */ 7,-3,-1,-14,-12,-9,-9,3, -1,-1,0,-9,-1,-3,127,-2, 0,-2,1,-6,-5,-3,-21,-6, 
  /* [7][2][][] */ 7,-2,-2,-5,-13,-6,-2,3, 5,0,-2,-2,-1,-6,-21,-3, -1,0,1,-5,16,-8,-14,-4, 
  /* [8][0][][] */ 2,20,21,-48,30,-74,1,-109, -10,16,23,-70,12,-111,-22,-66, -5,0,6,-68,-11,-69,-12,-29, 
  /* [8][1][][] */ 4,5,-3,-57,11,-15,21,-29, -15,9,12,-67,18,-89,-10,-118, -11,2,7,-71,-13,-89,-6,-61, 
  /* [8][2][][] */ 0,-21,-29,-40,-7,0,54,8, -19,1,29,-37,5,-25,-13,-50, -16,1,2,-59,76,-90,3,-127, 
  /* [9][0][][] */ 16,-2,-33,-22,-16,-14,38,7, -12,-25,-45,-11,-1,32,32,-4, -124,-52,-46,108,10,-20,-9,-15, 
  /* [9][1][][] */ -17,-3,-44,10,-7,2,17,6, -87,-100,-79,30,-2,65,-5,17, -94,-125,-107,-23,-9,21,-25,9, 
  /* [9][2][][] */ -56,-47,-37,20,6,28,-25,1, -98,-127,-68,34,-9,23,-51,2, -46,-92,-83,10,-29,-15,-35,-6, 
  /* [10][0][][] */ -21,-97,-57,-54,-67,-74,-127,-21, -17,-49,-38,-61,-51,-80,-95,-29, -11,-54,-21,-66,-43,-85,-78,-28, 
  /* [10][1][][] */ 4,16,-5,-43,-54,-57,-84,-20, 2,1,-6,-38,-41,-42,-63,-17, -3,-23,-6,-49,-35,-59,-60,-22, 
  /* [10][2][][] */ 45,84,35,-67,-6,22,60,-18, 42,-42,57,-32,10,35,43,-42, 30,100,31,-82,20,-40,17,-81, 
  /* [11][0][][] */ 5,21,11,-32,-5,-69,-26,-36, 2,15,18,-33,-6,-85,-48,-51, 6,15,14,-52,-9,-85,-24,-24, 
  /* [11][1][][] */ 10,12,11,-122,-3,-83,13,-48, 11,12,20,-127,-1,-110,-30,-114, 9,17,5,-72,5,-108,-1,-114, 
  /* [11][2][][] */ 20,-2,-2,-66,-5,-31,-8,-15, -9,5,-8,-58,1,-32,121,-35, 1,2,25,-23,7,-35,-2,-62, 
  /* [12][0][][] */ -1,7,1,-13,25,43,10,2, -15,11,25,-55,27,-106,-14,-127, -19,0,7,-95,1,-110,-22,-85, 
  /* [12][1][][] */ -13,-45,-70,2,-40,29,11,43, -8,16,8,-10,12,16,9,1, -17,27,33,-42,12,-68,-6,-96, 
  /* [12][2][][] */ -38,-122,-109,1,-44,7,-4,17, -9,-60,-127,-1,-36,27,15,29, -17,51,26,1,4,-2,15,-12, 
  /* [13][0][][] */ -10,-22,-5,-23,-91,-56,-91,-20, -8,-15,0,-26,-93,-69,-37,-39, -7,116,-1,-54,-34,-100,-22,-46, 
  /* [13][1][][] */ 8,-13,-2,-33,-111,-67,-43,-15, 10,8,2,-51,-127,-48,3,-23, 43,-32,51,-53,-15,-43,11,-25, 
  /* [13][2][][] */ 14,-13,-3,-84,-90,-85,-5,-15, 11,3,-1,-48,-93,-17,42,-5, 15,80,16,1,-4,33,39,0, 
  /* [14][0][][] */ -24,-55,-30,-6,-84,-7,-20,7, 4,-15,-32,-9,-102,12,46,6, -3,35,16,6,0,-2,19,96, 
  /* [14][1][][] */ -40,-73,-18,-7,-84,-14,-52,4, -16,-69,-62,-8,-127,3,10,5, -37,-40,-58,13,-29,74,10,-33, 
  /* [14][2][][] */ -38,-56,-15,-13,-60,-23,-97,0, -30,-52,-26,-17,-81,-11,-33,-8, -51,-97,-42,-4,-66,-3,-25,87, 
  /* [15][0][][] */ 18,2,-8,-20,-9,0,38,-6, -40,-1,6,38,25,3,-23,-17, -29,-20,-1,5,20,-7,-24,-9, 
  /* [15][1][][] */ 6,6,-14,-3,4,11,10,0, -127,-7,0,12,11,9,-36,-15, -26,-19,0,8,8,-11,-26,-10, 
  /* [15][2][][] */ -14,1,-14,7,21,21,29,1, -63,-6,-2,24,21,6,-34,-12, -13,-9,1,3,5,-14,-19,-9, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant6_scale = { 16, { 0.0046577281318604946, 0.0061359037645161152, 0.0078008631244301796, 0.0074019990861415863, 0.0052745877765119076, 0.0068020336329936981, 0.00501224584877491, 0.0070187114179134369, 0.0069303964264690876, 0.0060891648754477501, 0.003935979213565588, 0.0069674435071647167, 0.0076826591975986958, 0.005302471574395895, 0.0054597649723291397, 0.0056739840656518936, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[8] = { -6640, -10863, -2471, -4525, -10690, -9819, -44703, -5204, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 1.1381686817912851e-05, 1.3200116882217117e-05, 1.4067151823837776e-05, 1.4503763850370888e-05, 1.0090206160384696e-05, 1.3783257600152865e-05, 5.961419901723275e-06, 1.4257638213166501e-05, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[8*3*3*1] = { 
  /* [0][0][][] */ -58, -41, -16, 
  /* [0][1][][] */ -30, -15, 37, 
  /* [0][2][][] */ -17, 29, 127, 
  /* [1][0][][] */ -42, -64, -51, 
  /* [1][1][][] */ 15, -17, -15, 
  /* [1][2][][] */ 43, 127, 42, 
  /* [2][0][][] */ -50, -43, -41, 
  /* [2][1][][] */ -4, -8, -12, 
  /* [2][2][][] */ 127, 18, 12, 
  /* [3][0][][] */ 127, 29, 12, 
  /* [3][1][][] */ 3, -14, -17, 
  /* [3][2][][] */ -39, -46, -51, 
  /* [4][0][][] */ 46, -31, -61, 
  /* [4][1][][] */ 89, -30, -57, 
  /* [4][2][][] */ 127, 9, -54, 
  /* [5][0][][] */ 20, 127, 20, 
  /* [5][1][][] */ 4, 1, -2, 
  /* [5][2][][] */ -35, -58, -42, 
  /* [6][0][][] */ -23, -9, 64, 
  /* [6][1][][] */ -13, -18, 107, 
  /* [6][2][][] */ -8, -7, 127, 
  /* [7][0][][] */ 11, 41, 127, 
  /* [7][1][][] */ -17, -14, 8, 
  /* [7][2][][] */ -51, -51, -45, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant8_scale = { 8, { 0.0058503663167357445, 0.0067850677296519279, 0.0072307377122342587, 0.0074551631696522236, 0.0051865247078239918, 0.0070848115719854832, 0.0030642636120319366, 0.0073286504484713078, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,99,40,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0019454656867310405, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,99,40,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0018328599398955703, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,50,20,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0018328599398955703, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,50,20,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0018930956721305847, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,25,10,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0018930956721305847, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,4000 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0018930956721305847, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,2 } };
const TfArray<1, float> quant15_scale = { 1, { 0.068482734262943268, } };
const TfArray<1, int> quant15_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,2 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,8,7 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,6,5 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,2 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,4,3 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 8000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 31680), (TfLiteIntArray*)&g0::tensor_dimension9, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 31680, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 31680), (TfLiteIntArray*)&g0::tensor_dimension11, 8000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 16000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16000), (TfLiteIntArray*)&g0::tensor_dimension13, 4000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 4000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4000), (TfLiteIntArray*)&g0::tensor_dimension15, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[8] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[8] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 17, };
const size_t tflNodes_subgraph_index[] = {0, 8, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  16, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_4_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 17;
  for (size_t i = 0; i < 17; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_invoke() {
  for (size_t i = 0; i < 8; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
